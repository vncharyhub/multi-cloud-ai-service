AWSTemplateFormatVersion: '2010-09-09'
Description: Multi-cloud AI service using Lambda and API Gateway

Parameters:
  GitHubRepo:
    Type: String
  GitHubOwner:
    Type: String
  GitHubBranch:
    Type: String
    Default: main
  GitHubToken:
    Type: String
    NoEcho: true

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AISecrets
      Description: Stores API keys for Bedrock and Azure
      SecretString: '{"bedrock_api_key":"dummy-key","azure_api_key":"dummy-key"}'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MultiCloudAIHandler
      Runtime: python3.11
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-lambda-bucket-name
        S3Key: lambda.zip
      Environment:
        Variables:
          SECRET_NAME: !Ref SecretsManagerSecret

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MultiCloudAPI
      ProtocolType: HTTP

  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'

  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /invoke
      Target: !Sub integrations/${HttpApiIntegration}

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - s3:*
                  - codebuild:*
                  - lambda:*
                Resource: "*"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: your-artifact-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
        - Name: Build
          Actions:
            - Name: LambdaBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: your-codebuild-project
        - Name: Deploy
          Actions:
            - Name: DeployStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: MultiCloudAIStack
                TemplatePath: BuildArtifact::template.yaml
